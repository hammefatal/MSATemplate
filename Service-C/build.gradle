plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.palantir.docker' version '0.36.0'
}

group = 'home.hammefatal.msa'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'org.springframework.kafka:spring-kafka'
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	archiveFileName = rootProject.name.toLowerCase() + "-" + project.name.toLowerCase() + "-" + project.version + ".jar"
}

docker {
	// 이미지 이름
	name rootProject.name.toLowerCase() + "-" + project.name.toLowerCase() + ":" + project.version
	// 어떤 Dockerfile
	dockerfile file('../Dockerfile')
	// 어떤 파일들을 Dockerfile 에 복사할 것인가
	files tasks.bootJar.outputs.files
	println "##### Docker task for ${tasks.bootJar.outputs.files.singleFile.name} #####"
	// Dockerfile 에 전달할 인자
	buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}